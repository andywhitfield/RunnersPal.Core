@page
@model RoutePal.MapModel

<aside>
    <vc:user-nav />
</aside>

<article>
    <form name="rp-map" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" name="points" value="@Model.Points" />
    <input type="hidden" name="distance" value="@Model.Distance" />
    <input type="hidden" name="routeid" value="@Model.RouteId" />
    <h1 class="rp-map-head">Route mapping</h1>
    <div>
    <input type="submit" name="save" value="Save" />
    <button type="button" name="undo">Undo</button>
    <button type="button" name="clear">Clear</button>
    @if (Model.RouteId.HasValue) {
    <button type="submit" name="delete" value="delete" data-confirm="Are you sure you want to delete this route?">Delete</button>
    }
    </div>

    <div>
        <label for="rp-map-name">Name:</label>
        <input type="text" id="rp-map-name" name="routename" class="rp-map-name" value="@Model.RouteName" />
        Distance: <span class="rp-map-distance">0</span>
    </div>
    <div>
        <label for="rp-map-notes">Notes:<br/><small>(optional)</small></label>
        <textarea id="rp-map-notes" name="routenotes" class="rp-map-notes" wrap="off">@Model.RouteNotes</textarea>
    </div>
    </form>
    <div id="map"></div>
</article>

@section Scripts {
<script type="text/javascript">
    const map = L.map('map');
    
    const routeNameEl = $('form[name="rp-map"] input[name="routename"]');
    let mapPointsEl = $('form[name="rp-map"] input[name="points"]');
    let mapPoints = mapPointsEl.val() === '' ? [] : JSON.parse(mapPointsEl.val());
    if ((typeof mapPoints !== 'object') || (typeof mapPoints.length !== 'number') || mapPoints.length === 0) {
        if (!navigator.geolocation) {
            map.setView([54.505, -0.09], 6);
        } else {
            navigator.geolocation.getCurrentPosition(
                function(position) {
                    map.setView([position.coords.latitude, position.coords.longitude], 12);
                },
                function() {
                    map.setView([54.505, -0.09], 6);
                });
        }
    } else {
	    map.fitBounds(L.latLngBounds(mapPoints));
    }
	L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
		maxZoom: 19,
		attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
	}).addTo(map);

    const distanceFormEl = $('form[name="rp-map"] input[name="distance"]');
    const route = new MapRoute(map, mapPointsEl, distanceFormEl, $('span.rp-map-distance'));
    for (const mapPoint of mapPoints) {
        route.addPoint(mapPoint);
    }

    const saveBtnEl = $('form[name="rp-map"] input[name="save"]');
    saveBtnEl.prop('disabled', true);
    route.onChange(rpUpdateSaveButton);
    routeNameEl.on('change input paste keyup', rpUpdateSaveButton);

    $('form[name="rp-map"] button[name="undo"]').click(function() { route.undoLastPoint(); });
    $('form[name="rp-map"] button[name="clear"]').click(function() {
        if (confirm('Are you sure you want to clear this route, removing all points and start/end markers?'))
            route.clearRoute();
    });

    function rpUpdateSaveButton() {
        saveBtnEl.prop('disabled',
            !routeNameEl.val() || /^\s*$/.test(routeNameEl.val()) || // no route name
            distanceFormEl.val() === '' || distanceFormEl.val() === '0'); // no points
    }
</script>
}
