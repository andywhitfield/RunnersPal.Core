@page
@model RoutePal.MapModel

<aside>
    <vc:user-nav />
</aside>

<article>
    <form name="rp-map" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" name="points" value="@Model.Points" />
    <input type="hidden" name="distance" value="@Model.Distance" />
    <input type="hidden" name="routeid" value="@Model.RouteId" />
    <h1 class="rp-map-head">Route mapping</h1>
    <div>
    @if (!Model.IsRouteDeleted) {
    <input type="submit" name="save" value="Save" />
    }
    <button type="button" name="undo">Undo</button>
    <button type="button" name="clear">Clear</button>
    @if (Model.RouteId == null && Model.LoadUnsaved == null) {
    <button type="button" name="loadunsaved">Load unsaved route</button>
    }
    @if (Model.RouteId.HasValue && !Model.IsRouteDeleted) {
    <button type="submit" name="delete" value="delete" data-confirm="Are you sure you want to delete this route?">Delete</button>
    }
    @if (Model.IsRouteDeleted) {
    <span class="rp-route-deleted">This route has been deleted</span>
    }
    <button type="button" name="elevation" title="Show/Hide map elevation">&Delta;</button>
    </div>

    <div class="rp-map-name">
        <label for="rp-map-name">Name:</label>
        <input type="text" id="rp-map-name" name="routename" class="rp-map-name" value="@Model.RouteName" />
        Distance: <span class="rp-map-distance">0</span>
        @if (!Model.IsLoggedIn) {
        <button type="button" name="switchunits">switch to @Model.SwitchToUnit</button>
        }
    </div>
    <div>
        <label for="rp-map-notes">Notes:<br/><small>(optional)</small></label>
        <textarea id="rp-map-notes" name="routenotes" class="rp-map-notes" wrap="off">@Model.RouteNotes</textarea>
    </div>
    </form>
    <div id="map"></div>
    <div id="elevation"><div id="rp-elevation-chart"></div></div>
</article>

@section Head {
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/highcharts@12.1.2/css/highcharts.min.css">
<style type="text/css">
    :root {
        --highcharts-color-0: #87eb66;
    }
</style>
}
@section Scripts {
<script src="https://cdn.jsdelivr.net/npm/highcharts@12.1.2/highcharts.min.js"></script>
<script type="text/javascript">
    const map = L.map('map');

    $().ready(function() {
        const routeNameEl = $('form[name="rp-map"] input[name="routename"]');
        const mapPointsEl = $('form[name="rp-map"] input[name="points"]');
        const elevationBtnEl = $('form[name="rp-map"] button[name="elevation"]');

        const elevationEl = $('#elevation');
        elevationEl.hide();
        elevationBtnEl.prop('disabled', true);
        elevationBtnEl.click(function() {
            if (elevationEl.is(':hidden')) {
                $('#rp-elevation-chart').empty();
                $.post('/api/map/elevation', { points: mapPointsEl.val(), unit: '@(await Model.UserUnitsAsync())' })
                .done(function(data) {
                    console.log('elevation returned: ' + data.series.length + ' points');

                    Highcharts.chart('rp-elevation-chart', {
                        chart: {
                            type: 'areaspline',
                            styledMode: true
                        },
                        title: undefined,
                        series: [{
                            name: 'Elevation (meters)',
                            data: data.elevation,
                            marker: { enabled: false }
                        }],
                        xAxis: {
                            categories: data.series,
                            title: { text: 'Distance in @(await Model.UserUnitsAsync())' }
                        },
                        yAxis: { title: { text: 'Height in meters' } },
                        plotOptions: { areaspline: { fillOpacity: 0.5 } },
                        tooltip: {
                            headerFormat: '',
                            pointFormat: 'Distance: {point.key} @(await Model.UserUnitsAsync())<br/>Elevation: {point.y} meters'
                        },
                        legend: { enabled: false },
                        subtitle: { text: data.stats, verticalAlign: 'top', align: 'right', floating: true }
                    });

                    elevationEl.show();
                })
                .fail(function() {
                    console.warn('failed getting elevation');
                    $('#rp-elevation-chart').append('<strong class="rp-elevation-error">Sorry, could not load the elevation profile for this route.</strong>');
                    elevationEl.show();
                });
            } else {
                elevationEl.hide();
            }
        });

        @if (Model.RouteId != null) {
        <text>
        console.log('saved route, clearing local storage');
        localStorage.removeItem('map.points');
        localStorage.removeItem('map.name');
        localStorage.removeItem('map.notes');
        </text>
        } else if (Model.LoadUnsaved == true) {
        <text>
        if (localStorage.getItem('map.points'))
            mapPointsEl.val(localStorage.getItem('map.points'));
        if (localStorage.getItem('map.name'))
            routeNameEl.val(localStorage.getItem('map.name'));
        if (localStorage.getItem('map.notes'))
            $('form[name="rp-map"] textarea[name="routenotes"]').val(localStorage.getItem('map.notes'));
        console.log('loading an unsaved route local storage: '+routeNameEl.val());
        </text>
        } else {
        <text>
        if (localStorage.getItem('map.points'))
            $('form[name="rp-map"] button[name="loadunsaved"]').click(function() { window.location = '/routepal/map?loadunsaved=true'; });
        else
            $('form[name="rp-map"] button[name="loadunsaved"]').hide();
        </text>
        }
        let mapPoints = mapPointsEl.val() === '' ? [] : JSON.parse(mapPointsEl.val());
        if ((typeof mapPoints !== 'object') || (typeof mapPoints.length !== 'number') || mapPoints.length === 0) {
            rpSetMapDefaultView(map);
        } else {
            map.fitBounds(L.latLngBounds(mapPoints));
        }
        rpInitMap(map);

        const distanceFormEl = $('form[name="rp-map"] input[name="distance"]');
        const route = new MapRoute(map, mapPointsEl, distanceFormEl, $('span.rp-map-distance'), '@(await Model.UserUnitsAsync())', @(await Model.UserUnitsMultiplierAsync()));
        for (const mapPoint of mapPoints) {
            route.addPoint(mapPoint);
        }

        const saveBtnEl = $('form[name="rp-map"] input[name="save"]');
        rpUpdateSaveButton(true);
        route.onChange(rpUpdateSaveButton);
        routeNameEl.on('change input paste keyup', rpUpdateSaveButton);

        $('form[name="rp-map"] button[name="undo"]').click(function() { route.undoLastPoint(); });
        $('form[name="rp-map"] button[name="clear"]').click(function() {
            if (confirm('Are you sure you want to clear this route, removing all points and start/end markers?'))
                route.clearRoute();
        });

        function saveToLocalStorage() {
            console.log('saving route ['+routeNameEl.val()+'] to local storage');
            localStorage.setItem('map.points', mapPointsEl.val());
            localStorage.setItem('map.name', routeNameEl.val());
            localStorage.setItem('map.notes', $('form[name="rp-map"] textarea[name="routenotes"]').val());
        }

        function rpUpdateSaveButton(initialLoad) {
            elevationEl.hide();
            const noMapPoints = distanceFormEl.val() === '' || distanceFormEl.val() === '0';
            const noRouteName = !routeNameEl.val() || /^\s*$/.test(routeNameEl.val());
            elevationBtnEl.prop('disabled', noMapPoints);
            const isSaveDisabled = noRouteName || noMapPoints;
            saveBtnEl.prop('disabled', isSaveDisabled);

            if (!isSaveDisabled)
                $('form[name="rp-map"] button[name="loadunsaved"]').hide();
            if (!initialLoad)
                saveToLocalStorage();
        }

        $('form[name="rp-map"] button[name="switchunits"]').click(function() {
            saveToLocalStorage();
            window.location = '/routepal/map?loadunsaved=true&unit=@Model.SwitchToUnit';
        });
    });
</script>
}
